<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HashCode为什么使用31作为乘数</title>
      <link href="/2024/09/01/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2024/09/01/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>HashMap是用来存储键值对的数据结构，是用哈希表来实现的，可以实现O(1)时间复杂度的插入和查找。哈希表的基本原理即通过计算key的哈希值将元素插入到指定位置，因此在分析HashMap源码之前需要先分析一下哈希值的计算过程。</p><p>查看String类的源码可以发现，它重写了hashcode方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到String类的hashcode方法遍历字符串的每个字符做与31做乘积运算，公式如下：$s[0]^{n-1}+s[1]^{n-2}+…s[n-1]$，那这里为什么要使用31作为乘数呢？</p><p>stackoverflow中有一篇讨论文章<a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier">Why does Java’s hashCode() in String use 31 as a multiplier? - Stack Overflow</a>，其中有一个高赞回答：</p><p>Goodrich and Tamassia computed from over 50,000 English words (formed as the union of the word lists provided in two variants of Unix) that using the constants 31, 33, 37, 39, and 41 will produce fewer than 7 collisions in each case. This may be the reason that so many Java implementations choose such constants.</p><p>即计算超过50000个单词的hashcode，分别使用31，33，37，39作为乘数，计算碰撞结果。下面我们就来做这个实验，观察不同乘数的碰撞结果。</p><h2 id="2-hashcode碰撞概率统计"><a href="#2-hashcode碰撞概率统计" class="headerlink" title="2. hashcode碰撞概率统计"></a>2. hashcode碰撞概率统计</h2><h3 id="2-1-计算hashcode碰撞概率"><a href="#2-1-计算hashcode碰撞概率" class="headerlink" title="2.1 计算hashcode碰撞概率"></a>2.1 计算hashcode碰撞概率</h3><p>首先准备10万个单词：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>a<span class="hljs-string">&quot;n.(A)As 或 A&#x27;s  安(ampere(a) art.一;n.字母A /[军] Analog.Digital,模拟/数字 /(=account of) 帐上&quot;</span><br><span class="hljs-number">2</span>aaalAmerican Academy of Arts <span class="hljs-keyword">and</span> Letters 美国艺术和文学学会<br><span class="hljs-number">3</span>aachen 亚琛[德意志联邦共和国西部城市]<br><span class="hljs-number">4</span>aacsAirways <span class="hljs-keyword">and</span> Air Communications Service (美国)航路与航空通讯联络处<br><span class="hljs-symbol">...</span><br></code></pre></td></tr></table></figure><p>读取单词：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//读取每一个单词，并将单词保存在一个Set集合中。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;String&gt; <span class="hljs-title function_">readWordList</span><span class="hljs-params">(String url)</span> &#123;<br>    Set&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(url), StandardCharsets.UTF_8);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            String[] ss = line.split(<span class="hljs-string">&quot;\t&quot;</span>);<br>            list.add(ss[<span class="hljs-number">1</span>]);<br>        &#125;<br>        br.close();<br>        isr.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignore) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>hashcode函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">hashCode</span><span class="hljs-params">(String str, Integer multiplier)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>        hash = multiplier * hash + str.charAt(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> hash;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算hash碰撞概率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//计算hash碰撞概率</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RateInfo <span class="hljs-title function_">hashCollisionRate</span><span class="hljs-params">(Integer multiplier, List&lt;Integer&gt; hashCodeList)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxHash</span> <span class="hljs-operator">=</span> hashCodeList.stream().max(Integer::compareTo).get();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">minHash</span> <span class="hljs-operator">=</span> hashCodeList.stream().min(Integer::compareTo).get();<br><span class="hljs-comment">//将hashcode去重，计算重复元素的比例</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">collisionCount</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (hashCodeList.size() - hashCodeList.stream().distinct().count());<br>    <span class="hljs-type">double</span> <span class="hljs-variable">collisionRate</span> <span class="hljs-operator">=</span> (collisionCount * <span class="hljs-number">1.0</span>) / hashCodeList.size();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RateInfo</span>(maxHash, minHash, multiplier, collisionCount, collisionRate);<br>&#125;<br><br><span class="hljs-comment">//计算不同乘数的hash碰撞概率</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;RateInfo&gt; <span class="hljs-title function_">collisionRateList</span><span class="hljs-params">(Set&lt;String&gt; strList, Integer... multipliers)</span> &#123;<br>    List&lt;RateInfo&gt; rateInfoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer multiplier : multipliers) &#123;<br>        List&lt;Integer&gt; hashCodeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String str : strList) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> hashCode(str, multiplier);<br>            hashCodeList.add(hashCode);<br>        &#125;<br>        rateInfoList.add(hashCollisionRate(multiplier, hashCodeList));<br>    &#125;<br>    <span class="hljs-keyword">return</span> rateInfoList;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里RateInfo为自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateInfo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxHash;            <span class="hljs-comment">// 最大Hash</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> minHash;            <span class="hljs-comment">// 最小Hash</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> multiplier;         <span class="hljs-comment">// hash计算乘机因子</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> collisionCount;     <span class="hljs-comment">// 碰撞数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> collisionRate;   <span class="hljs-comment">// 碰撞比率</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-单元测试"><a href="#2-2-单元测试" class="headerlink" title="2.2 单元测试"></a>2.2 单元测试</h3><p>编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Set&lt;String&gt; words;<br><br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-string">&quot;abc&quot;</span>.hashCode();<br>    <span class="hljs-comment">// 读取文件，103976个英语单词库.txt</span><br>    words = FileUtil.readWordList(<span class="hljs-string">&quot;103976个英语单词库.txt&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_collisionRate</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;单词数量：&quot;</span> + words.size());<br>    List&lt;RateInfo&gt; rateInfoList = HashCode.collisionRateList(words, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">39</span>, <span class="hljs-number">41</span>, <span class="hljs-number">199</span>);<br>    <span class="hljs-keyword">for</span> (RateInfo rate : rateInfoList) &#123;<br>        System.out.println(String.format(<span class="hljs-string">&quot;乘数 = %4d, 最小Hash = %11d, 最大Hash = %10d, 碰撞数量 =%6d, 碰撞概率 = %.4f%%&quot;</span>, rate.getMultiplier(), rate.getMinHash(), rate.getMaxHash(), rate.getCollisionCount(), rate.getCollisionRate() * <span class="hljs-number">100</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">单词数量：<span class="hljs-number">103976</span><br>乘数 =    <span class="hljs-number">2</span>, 最小Hash =          <span class="hljs-number">97</span>, 最大Hash = <span class="hljs-number">1842581979</span>, 碰撞数量 = <span class="hljs-number">60382</span>, 碰撞概率 = <span class="hljs-number">58.0730</span>%<br>乘数 =    <span class="hljs-number">3</span>, 最小Hash = -<span class="hljs-number">2147308825</span>, 最大Hash = <span class="hljs-number">2146995420</span>, 碰撞数量 = <span class="hljs-number">24300</span>, 碰撞概率 = <span class="hljs-number">23.3708</span>%<br>乘数 =    <span class="hljs-number">5</span>, 最小Hash = -<span class="hljs-number">2147091606</span>, 最大Hash = <span class="hljs-number">2147227581</span>, 碰撞数量 =  <span class="hljs-number">7994</span>, 碰撞概率 = <span class="hljs-number">7.6883</span>%<br>乘数 =    <span class="hljs-number">7</span>, 最小Hash = -<span class="hljs-number">2147431389</span>, 最大Hash = <span class="hljs-number">2147226363</span>, 碰撞数量 =  <span class="hljs-number">3826</span>, 碰撞概率 = <span class="hljs-number">3.6797</span>%<br>乘数 =   <span class="hljs-number">17</span>, 最小Hash = -<span class="hljs-number">2147238638</span>, 最大Hash = <span class="hljs-number">2147101452</span>, 碰撞数量 =   <span class="hljs-number">576</span>, 碰撞概率 = <span class="hljs-number">0.5540</span>%<br>乘数 =   <span class="hljs-number">31</span>, 最小Hash = -<span class="hljs-number">2147461248</span>, 最大Hash = <span class="hljs-number">2147444544</span>, 碰撞数量 =     <span class="hljs-number">2</span>, 碰撞概率 = <span class="hljs-number">0.0019</span>%<br>乘数 =   <span class="hljs-number">32</span>, 最小Hash = -<span class="hljs-number">2007883634</span>, 最大Hash = <span class="hljs-number">2074238226</span>, 碰撞数量 = <span class="hljs-number">34947</span>, 碰撞概率 = <span class="hljs-number">33.6106</span>%<br>乘数 =   <span class="hljs-number">33</span>, 最小Hash = -<span class="hljs-number">2147469046</span>, 最大Hash = <span class="hljs-number">2147378587</span>, 碰撞数量 =     <span class="hljs-number">1</span>, 碰撞概率 = <span class="hljs-number">0.0010</span>%<br>乘数 =   <span class="hljs-number">39</span>, 最小Hash = -<span class="hljs-number">2147463635</span>, 最大Hash = <span class="hljs-number">2147443239</span>, 碰撞数量 =     <span class="hljs-number">0</span>, 碰撞概率 = <span class="hljs-number">0.0000</span>%<br>乘数 =   <span class="hljs-number">41</span>, 最小Hash = -<span class="hljs-number">2147423916</span>, 最大Hash = <span class="hljs-number">2147441721</span>, 碰撞数量 =     <span class="hljs-number">1</span>, 碰撞概率 = <span class="hljs-number">0.0010</span>%<br>乘数 =  <span class="hljs-number">199</span>, 最小Hash = -<span class="hljs-number">2147459902</span>, 最大Hash = <span class="hljs-number">2147480320</span>, 碰撞数量 =     <span class="hljs-number">0</span>, 碰撞概率 = <span class="hljs-number">0.0000</span>%<br></code></pre></td></tr></table></figure><p>根据不同乘数的碰撞概率绘制图像如下：</p><img src="https://gitee.com/caohuisheng/imgbed/raw/master/img/202409011614425.png" alt="image-20240901161440223" style="zoom: 67%;" /><p>根据结果可以看出，乘数为2、3、5、7、17、32时，碰撞概率都较大，乘数为31、33、39、41、199时，碰撞概率较小，但是乘数较大时，hashcode也会溢出，导致丢失信息。</p><h2 id="3-hashcode散列分布"><a href="#3-hashcode散列分布" class="headerlink" title="3. hashcode散列分布"></a>3. hashcode散列分布</h2><p>除了计算不同乘数下的hashcode碰撞概率，还需要计算hashcode的分布，只有当hashcode分布均匀时，才能减少碰撞。</p><p>为了计算hashcode的散列分布，可以将int的取值范围2^64分成64份，统计每个范围的hashcode数量即可。</p><h3 id="3-1-哈希值分段存放"><a href="#3-1-哈希值分段存放" class="headerlink" title="3.1 哈希值分段存放"></a>3.1 哈希值分段存放</h3><p>计算每个区间的hashcode数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Integer&gt; <span class="hljs-title function_">hashArea</span><span class="hljs-params">(List&lt;Integer&gt; hashCodeList)</span> &#123;<br>    Map&lt;Integer, Integer&gt; statistics = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x80000000</span>; i &lt;= <span class="hljs-number">0x7fffffff</span>; i += <span class="hljs-number">67108864</span>) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> min + <span class="hljs-number">67108864</span>;<br>        <span class="hljs-comment">// 筛选出每个区间的哈希值数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) hashCodeList.parallelStream().filter(x -&gt; x &gt;= min &amp;&amp; x &lt; max).count();<br>        statistics.put(start++, num);<br>    &#125;<br>    <span class="hljs-keyword">return</span> statistics;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Integer&gt; <span class="hljs-title function_">hashArea</span><span class="hljs-params">(Set&lt;String&gt; strList, Integer multiplier)</span>&#123;<br>    List&lt;Integer&gt; hashCodeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String str : strList) &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> hashCode(str, multiplier);<br>        hashCodeList.add(hashCode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> hashArea(hashCodeList);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-单元测试"><a href="#3-2-单元测试" class="headerlink" title="3.2 单元测试"></a>3.2 单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_hashArea</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(HashCode.hashArea(words, <span class="hljs-number">2</span>).values());<br>    System.out.println(HashCode.hashArea(words, <span class="hljs-number">7</span>).values());<br>    System.out.println(HashCode.hashArea(words, <span class="hljs-number">31</span>).values());<br>    System.out.println(HashCode.hashArea(words, <span class="hljs-number">32</span>).values());<br>    System.out.println(HashCode.hashArea(words, <span class="hljs-number">199</span>).values());<br>&#125;<br></code></pre></td></tr></table></figure><p>上面计算了不同乘数在每个区间的hashcode数量，绘制图像如下：</p><p><img src="https://gitee.com/caohuisheng/imgbed/raw/master/img/202409011624789.png" alt="image-20240901162455507"></p><p><img src="https://gitee.com/caohuisheng/imgbed/raw/master/img/202409011625143.png" alt="image-20240901162518911"></p><p>可以看到乘数为2、7、32时，hashcode分布都不是很均匀，乘数为31、199时分布较均匀，只有部分区间包含较多元素，但是使用199作为乘数会导致数据溢出，丢失信息，不能选择，因此选择31作为乘数是比较适合的。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文主要分析了String类中的hashcode为什么使用31作为乘数，通过使用不同的乘数计算hashcode，统计hashcode的碰撞概率和散列分布情况，得出结论：使用31作为乘数时，hashcode的碰撞概率较小，分布区间较均匀，并且hashcode的数据范围较小，不易产生溢出和数据丢失问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码分析</title>
      <link href="/2024/05/22/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2024/05/22/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ArrayList简介"><a href="#一、ArrayList简介" class="headerlink" title="一、ArrayList简介"></a>一、ArrayList简介</h2><p><code>ArrayList</code>的底层数据结构是动态数组，它的容量可以动态增长。在添加元素前可以使用<code>ensureCapacity</code>来增大数组的大小。</p><p><code>ArrayList</code>继承自<code>AbstractList</code>，实现了<code>List</code>, <code>RandomAccess</code>, <code>Cloneable</code>, <code>Serializable</code>这些接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>List</code>: 表明它是一个列表，支持添加、删除、查找等操作，并且可以通过下标进行访问。</li><li><code>RandomAccess</code>:这是一个标识接口，标志该类支持快速随机访问。</li><li><code>Cloneable</code>:表明该类具有拷贝能力，支持深拷贝和浅拷贝。</li><li><code>Serializble</code>:表明该类可以进行序列化操作，可以将对象转为字节流进行持久化存储或网络传输。</li></ul><h3 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h3><ul><li><code>ArrayList</code>是<code>List</code>的主要实现类，底层使用<code>Object[]</code>数组存储，线程不安全；</li><li><code>Vector</code>是<code>List</code>的古老实现类，底层使用<code>Object[]</code>数组存储，线程安全。</li></ul><h3 id="ArrayList可以存储null值吗"><a href="#ArrayList可以存储null值吗" class="headerlink" title="ArrayList可以存储null值吗"></a>ArrayList可以存储null值吗</h3><p><code>ArrayList</code>中可以存储任何类型对象，包括null值，不过不建议这么做，因为null值无意义，会让代码难以维护（如忘记判空处理导致空指针异常）。</p><h3 id="ArrayList与LinkedList区别"><a href="#ArrayList与LinkedList区别" class="headerlink" title="ArrayList与LinkedList区别"></a>ArrayList与LinkedList区别</h3><ul><li>是否线程安全：<code>ArrayList</code>和<code>LinkedList</code>都是不同步的，即不保证线程安全。</li><li>底层数据结构：<code>ArrayList</code>底层使用<code>Object[]</code>数组；<code>LinkedList</code>底层使用双向链表。</li><li>插入和删除是否受元素位置影响：<ul><li><code>ArrayList</code>使用数组存储，在末尾插入和删除时间复杂度为O(1)，在指定位置i插入和删除时间复杂度为O(n)。</li><li><code>LinkedList</code>使用链表存储，在头尾插入和删除时间复杂度为O(1)，但是在指定位置插入和删除时间复杂度为O(n)。</li></ul></li><li>是否支持快速随机访问：<code>ArrayList</code>支持，<code>LinkedList</code>不支持。</li><li>内存空间占用：<code>ArrayList</code>的空间浪费主要体现在列表结尾会预留一定的空间，<code>LinkedList</code>的空间浪费主要体现在每个节点中会额外保存前驱指针和后继指针。</li></ul><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>先看一下一些ArrayList的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认初始容量大小</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 空数组实例（空列表实例）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shared empty array instance used for default sized empty instances. We</span><br><span class="hljs-comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="hljs-comment"> * first element is added.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The array buffer into which the elements of the ArrayList are stored.</span><br><span class="hljs-comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span><br><span class="hljs-comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="hljs-comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Object[] elementData; <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 列表的大小（列表中元素的个数）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br></code></pre></td></tr></table></figure><p>再查看ArrayList的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认构造函数（使用初始容量10构造一个空列表）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 带初始容量的构造函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//创建initialCapacity大小的数组</span><br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//构造空数组</span><br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                initialCapacity);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建包含指定collection中所有元素的列表，这些元素利用该集合的迭代器按顺序返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    Object[] a = c.toArray();<br>    <span class="hljs-keyword">if</span> ((size = a.length) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c.getClass() == ArrayList.class) &#123;<br>            elementData = a;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            elementData = Arrays.copyOf(a, size, Object[].class);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// replace with empty array.</span><br>        elementData = EMPTY_ELEMENTDATA;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：以无参构造方法创建ArrayList时，实际上初始化赋值的是一个空数组，当真正像数组中添加元素时，才会分配容量。即向数组中添加第一个元素时，容量变为10。</p><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建博客</title>
      <link href="/2024/04/26/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/04/26/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p><strong>1.安装Node.js</strong></p><p>官网：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><strong>2.安装Git</strong></p><p>官网：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p><strong>1.安装hexo</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br>或者<br>cnpm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p><strong>2.初始化hexo</strong></p><p>创建存放博客的文件夹：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> myblog<br></code></pre></td></tr></table></figure><p><strong>3.安装需要的包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure><p><strong>4.启动服务节点</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> ，至此hexo博客就搭建好了，可以在本地访问。</p><h2 id="三、部署到GitHub"><a href="#三、部署到GitHub" class="headerlink" title="三、部署到GitHub"></a>三、部署到GitHub</h2><p><strong>1.新建github仓库</strong></p><p>仓库名为：&lt;用户名&gt;</p><p><strong>2.安装hexo上传插件</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p><strong>3.修改hexo配置文件</strong></p><p>编辑myblog&#x2F;_config.yml，找到deploy，修改如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> <span class="hljs-params">&lt;仓库地址&gt;</span><br><span class="hljs-symbol">  branch:</span> <span class="hljs-params">&lt;仓库分支名&gt;</span><br></code></pre></td></tr></table></figure><p>找到url，修改如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">url:</span> https:<span class="hljs-comment">//username.github.io</span><br></code></pre></td></tr></table></figure><p><strong>4.部署站点</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>推送过程中需要输入github用户名和密码。</p><p><strong>5.访问博客</strong></p><p>输入博客网址https:&#x2F;&#x2F;&lt;用户名&gt;.github.io，即可访问。</p><h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><p><strong>1.配置主题</strong></p><p>在<a href="https://hexo.io/themes/">Hexo</a>中找到自己喜欢的主题，根据其github仓库的文档配置即可。</p><p><strong>2.更新仓库</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h2 id="六、写文章"><a href="#六、写文章" class="headerlink" title="六、写文章"></a>六、写文章</h2><p><strong>1.创建文章</strong></p><p>使用如下命令创建文章：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文章名&quot;</span><br></code></pre></td></tr></table></figure><p>在source&#x2F;_posts目录下会生成对应文章，使用typora编辑文章。</p><p>更新仓库即可查看到发布的文章。</p><p><strong>2.创建草稿</strong></p><p>也可以先创建草稿，暂时不发布：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//新建草稿文件</span><br>hexo <span class="hljs-keyword">new</span> draft b<br><span class="hljs-comment">//预览草稿文件</span><br>hexo <span class="hljs-keyword">server</span> --draft<br><span class="hljs-comment">//发布草稿</span><br>hexo publish b<br></code></pre></td></tr></table></figure><p>发布草稿后更新仓库即可查看到发布的文章。</p><p>【参考资料】</p><p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">Hexo-零基础搭建个人博客(详解)_hexo博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/25/hello-world/"/>
      <url>/2024/04/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
